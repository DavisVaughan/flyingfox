% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scheduling.R
\name{scheduling}
\alias{scheduling}
\alias{fly_schedule_function}
\alias{every_day}
\alias{month_end}
\alias{month_start}
\alias{week_end}
\alias{week_start}
\alias{every_minute}
\alias{market_close}
\alias{market_open}
\title{Schedule a function to be called according to some timed rules}
\usage{
fly_schedule_function(func, date_rule = NULL, time_rule = NULL,
  half_days = TRUE, calendar = NULL)

every_day()

month_end(days_offset = 0L)

month_start(days_offset = 0L)

week_end(days_offset = 0L)

week_start(days_offset = 0L)

every_minute()

market_close()

market_open()
}
\arguments{
\item{func}{The function to execute at timed intervals. Must take \code{context} and \code{data} as its first
and second arguments.}

\item{date_rule}{One of: \code{every_day()}, \code{month_end()}, \code{month_start()}, \code{week_start()}, or \code{week_end()}.
If \code{NULL}, the default is \code{every_day()}.}

\item{time_rule}{One of: \code{every_minute()}, \code{market_close()}, or \code{market_open()}.
If \code{NULL}, the default is \code{every_minute()}.}

\item{half_days}{A boolean. Should this rule fire on half days?}

\item{calendar}{Calendar used to reconcile date and time rules.}
}
\description{
\code{fly_schedule_function()} allows you to schedule an R function to run at
timed iterations. Helpers are defined to declare the frequency at which
to execute the function.
}
\section{Zipline Documentation}{

\itemize{
\item \href{https://www.zipline.io/appendix.html#zipline.api.schedule_function}{fly_schedule_function()}
\item \href{https://www.zipline.io/appendix.html#zipline.api.date_rules}{Date Rules}
\item \href{https://www.zipline.io/appendix.html#zipline.api.time_rules}{Time Rules}
}
}

\examples{

# Just print i at each iteration
scheduled_fn <- function(context, data) {
  print(context$i)
}

fly_initialize <- function(context) {

  # Init to 0
  context$i = 0L

  # No extra timing arguments means "Always" (every day / every minute)
  fly_schedule_function(scheduled_fn)
}

fly_handle_data <- function(context, data) {

  # Increment day
  context$i <- context$i + 1L
}

# You should see the context$i variable printed at each day
performance <- fly_run_algorithm(
  fly_initialize,
  fly_handle_data,
  start = as.Date("2015-01-01"),
  end   = as.Date("2016-01-01")
)

}
